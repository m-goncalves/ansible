- name: Setup vprofile stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
  - name: Import VPC setup variables
    include_vars: vars/vpc_output_vars

  - name: Import VPC setup variables
    include_vars: vars/output_vars

  - name: Import vprofile setup variables
    include_vars: vars/vpro_stack_setup

  - name: Create vprofile key
    ec2_key:
      name: vpro-key
      region: "{{ region }}"
    register: vpro_key_out
  
  - name: Save ssh key
    copy:
      content: "{{vpro_key_out.key.private_key}}"
      dest: ./login-key.pem
      mode: 600
    when: vpro_key_out.changed

  - name: Create SG for loadbalancer
    ec2_group:
      name: vpro_elb_sg
      description: Allows port 80 from everywhere
      region: "{{ region }}"
      vpc_id: "{{ vpcid }}"
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
    register: vpro_elb_sg_out

  - name: Create SG for vprofile stack
    ec2_group:
      name: vprofile_stack_sg
      description: Allows port 80 from everywhere and all port within the SG
      region: "{{ region }}"
      vpc_id: "{{ vpcid }}"
      purge_rules: no
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          group_id: "{{ vpro_elb_sg_out.group_id }}"

        - proto: tcp
          from_port: 22
          to_port: 22
          group_id: "{{ BastionSGid }}"
    register: vprofile_stack_sg_out

  - name: Update SG with its own SG id
    ec2_group:
      name: vprofile_sg
      description: Allows port 80 from everywhere and all port within the SG
      region: "{{ region }}"
      vpc_id: "{{ vpcid }}"
      purge_rules: no
      rules:
        - proto: all
          group_id: "{{ vprofile_stack_sg_out.group_id }}"

  - name: Creating Nginx web01
    ec2:
      key_name: vprofile-key
      region: "{{region}}"
      instance_type: t2.micro
      image: "{{ nginx_ami }}"
      wait: yes
      wait_timeout: 300
      instance_tags:
        Name: "web01"
        Project: Vprofile
        Owner: DevOps Team
      exact_count: 1
      count_tag:
        Name: "web01"
        Project: Vprofile
        Owner: DevOps Team
      group_id: "{{vprofile_stack_sg_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
    register: web01_out

  - name: Creating tomcat instance
    ec2:
      key_name: vprofile-key
      region: "{{region}}"
      instance_type: t2.micro
      image: "{{ tomcat_ami }}"
      wait: yes
      wait_timeout: 300
      instance_tags:
        Name: "app01"
        Project: Vprofile
        Owner: DevOps Team
      exact_count: 1
      count_tag:
        Name: "app01"
        Project: Vprofile
        Owner: DevOps Team
      group_id: "{{vprofile_stack_sg_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
    register: app01_out

  - name: Creating memcache instance
    ec2:
      key_name: vprofile-key
      region: "{{region}}"
      instance_type: t2.micro
      image: "{{ memcache_ami }}"
      wait: yes
      wait_timeout: 300
      instance_tags:
        Name: "mem01"
        Project: Vprofile
        Owner: DevOps Team
      exact_count: 1
      count_tag:
        Name: "mem01"
        Project: Vprofile
        Owner: DevOps Team
      group_id: "{{vprofile_stack_sg_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
    register: 

  - name: Creating rabbitmq instance
    ec2:
      key_name: vprofile-key
      region: "{{ region }}"
      instance_type: t2.micro
      image: "{{ rmq_ami }}"
      wait: yes
      wait_timeout: 300
      instance_tags:
        Name: "rmq01"
        Project: Vprofile
        Owner: DevOps Team
      exact_count: 1
      count_tag:
        Name: "rmq01"
        Project: Vprofile
        Owner: DevOps Team
      group_id: "{{vprofile_stack_sg_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
    register: rmq01_out
  
  - name: Creating MySQL instance
    ec2:
      key_name: vprofile-key
      region: "{{ region }}"
      instance_type: t2.micro
      image: "{{ mysql_ami }}"
      wait: yes
      wait_timeout: 300
      instance_tags:
        Name: "db01"
        Project: Vprofile
        Owner: DevOps Team
      exact_count: 1
      count_tag:
        Name: "db01"
        Project: Vprofile
        Owner: DevOps Team
      group_id: "{{vprofile_stack_sg_out.group_id}}"
      vpc_subnet_id: "{{privsub1id}}"
    register: db01_out

  - debug:
      var: db01_out.tagged_instances[0].id
  
  - local_action:
        module: ec2_elb_lb
        name: "vprofile-elb"
        region: "{{ region }}"
        state: present
        instance_ids:
          - "{{ web01_out.tagged_instances[0].id }}"
        purge_instance_ids: true
        security_group_ids: "{{ vpro_elb_sg_out.group_id }}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - protocol: http # options are http, https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80

  - name: Insert/Update Hosts IP & Name in file provision_stack/group_vars/hostsip
    blockinfile:
      path: provision_stack/group_vars/hostsip
      block: |
        web01_ip: {{ web01_out.tagged_instances[0].private_ip }}
        app01_ip: {{ app01_out.tagged_instances[0].private_ip }}
        rmq01_ip: {{ rmq01_out.tagged_instances[0].private_ip }}
        mc01_ip: {{ mc01_out.tagged_instances[0].private_ip }}
        db01_ip: {{ db01_out.tagged_instances[0].private_ip }}
  
  - name: Copy login key to provision_stack directory
    copy:
      src: login-key.pem
      dest: provision-stack/login-key.pem
      mode: '0400'
  
  - name: Insert/Update Inventory file provision-stack/inventory-vpro
    blockinfile:
      path: provision-stack/inventory-vpro
      block: |
        web01 ansible_host={{ web01_out.tagged_instances[0].private_ip }}
        app01 ansible_host={{ app01_out.tagged_instances[0].private_ip }}
        rmq01 ansible_host={{ rmq01_out.tagged_instances[0].private_ip }}
        mc01 ansible_host={{ mc01_out.tagged_instances[0].private_ip }}
        db01 ansible_host={{ db01_out.tagged_instances[0].private_ip }}
        cntl ansible_host=127.0.0.1 ansible_connection=local
        [websrvgrp]
        web01
        [appsrvgrp]
        app01
        [rmqsrvgrp]
        rmq01
        [mcsrvgrp]
        mc01
        [dbsrvgrp]
        db01
        [control]
        cntl
        [stack_inst:children]
        websrvgrp
        appsrvgrp
        rmqsrvgrp
        mcsrvgrp
        dbsrvgrp
        [stack_inst:vars]
        ansible_user=ubuntu
        ansible_ssh_private_key_file=login-key.pem
        #ansible_python_interpreter=/usr/bin/python3